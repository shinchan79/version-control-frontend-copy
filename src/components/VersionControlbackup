'use client';

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/components/ui/use-toast";
import { Loader2, Tag as TagIcon, X, Edit2 } from "lucide-react";
import type { Version, Tag, ApiResponse, SuccessResponse } from "@/types/version";

const API_BASE = 'https://content-version-system.trinhhaiyen79.workers.dev';

export function VersionControl() {
  const [isOpen, setIsOpen] = useState(false);
  const [isTagDialogOpen, setIsTagDialogOpen] = useState(false);
  const [isEditTagDialogOpen, setIsEditTagDialogOpen] = useState(false);
  const [selectedVersionId, setSelectedVersionId] = useState<number | null>(null);
  const [editingTag, setEditingTag] = useState<{tagName: string; newName: string} | null>(null);
  const [newTagName, setNewTagName] = useState("");
  const [content, setContent] = useState("");
  const [message, setMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [versions, setVersions] = useState<Version[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isLoadingVersions, setIsLoadingVersions] = useState(true);
  const { toast } = useToast();

  const fetchData = async () => {
    setIsLoadingVersions(true);
    setError(null);
    
    try {
      console.log('Fetching versions...');
      const versionsResponse = await fetch(`${API_BASE}/content/default/versions`);
      
      if (!versionsResponse.ok) {
        throw new Error(`HTTP error! status: ${versionsResponse.status}`);
      }

      const versionsData = await versionsResponse.json();
      console.log('Raw versions data:', versionsData);
      
      // API trả về trực tiếp array of versions, không có wrapper
      if (Array.isArray(versionsData)) {
        setVersions(versionsData);
      } else if (versionsData.data && Array.isArray(versionsData.data)) {
        setVersions(versionsData.data);
      } else {
        console.warn('Versions data is not in expected format:', versionsData);
        setVersions([]);
      }

    } catch (error) {
      console.error('Error in fetchData:', error);
      setError(error instanceof Error ? error.message : 'An unknown error occurred');
      setVersions([]);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to load data",
        variant: "destructive",
      });
    } finally {
      setIsLoadingVersions(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      // Sửa endpoint từ /content/default thành /content
      const response = await fetch(`${API_BASE}/content`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          content, 
          message 
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Create version response:', errorText);
        throw new Error(`Failed to create version: ${errorText}`);
      }

      const data: ApiResponse<Version> = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      setIsOpen(false);
      setContent("");
      setMessage("");
      await fetchData();
      toast({
        title: "Success",
        description: "Version created successfully",
      });
    } catch (error) {
      console.error('Error creating version:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to create version",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handlePublish = async (versionId: number) => {
    try {
      const response = await fetch(`${API_BASE}/content/default/versions/${versionId}/publish`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ publishedBy: "admin" })
      });

      if (!response.ok) {
        throw new Error('Failed to publish version');
      }

      const data: ApiResponse<SuccessResponse> = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchData();
      toast({
        title: "Success",
        description: "Version published successfully",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to publish version",
        variant: "destructive",
      });
    }
  };

  const handleUnpublish = async (versionId: number) => {
    try {
      const response = await fetch(`${API_BASE}/content/default/versions/${versionId}/unpublish`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to unpublish version');
      }

      const data: ApiResponse<SuccessResponse> = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchData();
      toast({
        title: "Success",
        description: "Version unpublished successfully",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to unpublish version",
        variant: "destructive",
      });
    }
  };

  const handleRevert = async (versionId: number) => {
    try {
      const response = await fetch(`${API_BASE}/content/default/revert`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ versionId })
      });

      if (!response.ok) {
        throw new Error('Failed to revert version');
      }

      const data: ApiResponse<SuccessResponse> = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchData();
      toast({
        title: "Success",
        description: "Reverted to version successfully",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to revert version",
        variant: "destructive",
      });
    }
  };

  const handleDelete = async (versionId: number) => {
    try {
      const response = await fetch(`${API_BASE}/content/default/versions/${versionId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to delete version');
      }

      const data: ApiResponse<SuccessResponse> = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchData();
      toast({
        title: "Success",
        description: "Version deleted successfully",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to delete version",
        variant: "destructive",
      });
    }
  };

  const handleCreateTag = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedVersionId) return;
    setIsLoading(true);
    try {
      const response = await fetch(`${API_BASE}/content/default/tags`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          versionId: selectedVersionId, 
          tagName: newTagName
        })
      });

      if (!response.ok) {
        throw new Error('Failed to create tag');
      }

      const data: ApiResponse<Tag> = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchData();
      setIsTagDialogOpen(false);
      setNewTagName("");
      toast({
        title: "Success",
        description: "Tag created successfully",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to create tag",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleEditTag = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingTag || !selectedVersionId) return;
    setIsLoading(true);
    try {
      // Delete old tag
      const deleteResponse = await fetch(`${API_BASE}/content/default/tags/${editingTag.tagName}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!deleteResponse.ok) {
        throw new Error('Failed to update tag');
      }

      const deleteData: ApiResponse<SuccessResponse> = await deleteResponse.json();
      if (deleteData.error) {
        throw new Error(deleteData.error);
      }

      // Create new tag
      const createResponse = await fetch(`${API_BASE}/content/default/tags`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          versionId: selectedVersionId, 
          tagName: editingTag.newName 
        })
      });

      if (!createResponse.ok) {
        throw new Error('Failed to update tag');
      }

      const createData: ApiResponse<Tag> = await createResponse.json();
      if (createData.error) {
        throw new Error(createData.error);
      }

      await fetchData();
      setIsEditTagDialogOpen(false);
      setEditingTag(null);
      toast({
        title: "Success",
        description: "Tag updated successfully",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to update tag",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteTag = async (tagName: string) => {
    try {
      const response = await fetch(`${API_BASE}/content/default/tags/${tagName}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('Failed to delete tag');
      }

      const data: ApiResponse<SuccessResponse> = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }

      await fetchData();
      toast({
        title: "Success",
        description: "Tag deleted successfully",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to delete tag",
        variant: "destructive",
      });
    }
  };

  const handlePreview = (versionId: number) => {
    window.open(`/preview/${versionId}`, '_blank');
  };

  if (error) {
    return (
      <div className="p-4 text-red-500">
        <h1>Error loading versions</h1>
        <p>{error}</p>
        <Button onClick={fetchData} className="mt-4">
          Retry
        </Button>
      </div>
    );
  }

  if (isLoadingVersions) {
    return (
      <div className="flex items-center justify-center min-h-[200px]">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Version Control</h1>
        <Button onClick={() => setIsOpen(true)}>Create New Version</Button>
      </div>

      {versions.length === 0 ? (
        <p className="text-center text-gray-500">No versions found. Create your first version.</p>
      ) : (
        <div className="space-y-4">
          {versions.map((version) => (
            <div
              key={version.id}
              className="p-4 border rounded-lg space-y-2"
            >
              <div className="flex items-center justify-between">
                <div>
                  <div className="flex items-center gap-2">
                    <span className="font-medium">Version {version.id}</span>
                    <span className={`px-2 py-0.5 text-xs rounded-full ${
                      version.status === 'published' 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {version.status}
                    </span>
                  </div>
                  <div className="text-sm text-gray-500">
                    {new Date(version.timestamp).toLocaleString()}
                  </div>
                  {version.message && (
                    <div className="text-sm mt-1">{version.message}</div>
                  )}
                </div>
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handlePreview(version.id)}
                  >
                    Preview
                  </Button>
                  {version.status === 'draft' ? (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handlePublish(version.id)}
                    >
                      Publish
                    </Button>
                  ) : (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleUnpublish(version.id)}
                    >
                      Unpublish
                    </Button>
                  )}
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleRevert(version.id)}
                  >
                    Revert
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleDelete(version.id)}
                    className="text-red-500 hover:text-red-700"
                  >
                    Delete
                  </Button>
                </div>
              </div>

              <div className="flex flex-wrap gap-2 mt-2">
                {version.tags && Object.entries(version.tags).map(([tagName, tag]) => (
                  <div
                    key={tagName}
                    className="flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
                  >
                    <TagIcon size={14} />
                    <span>{tagName}</span>
                    <button
                      onClick={() => {
                        setSelectedVersionId(version.id);
                        setEditingTag({ tagName, newName: tagName });
                        setIsEditTagDialogOpen(true);
                      }}
                      className="hover:text-blue-600 ml-1"
                    >
                      <Edit2 size={14} />
                    </button>
                    <button
                      onClick={() => handleDeleteTag(tagName)}
                      className="hover:text-blue-600"
                    >
                      <X size={14} />
                    </button>
                  </div>
                ))}
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-7"
                  onClick={() => {
                    setSelectedVersionId(version.id);
                    setIsTagDialogOpen(true);
                  }}
                >
                  <TagIcon size={14} className="mr-1" />
                  Add Tag
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent>
          <form onSubmit={handleSubmit}>
            <DialogHeader>
              <DialogTitle>Create New Version</DialogTitle>
              <DialogDescription>
                Create a new version of the content with your changes.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <label htmlFor="content">Content</label>
                <Textarea
                  id="content"
                  value={content}
                  onChange={(e) => setContent(e.target.value)}
                  placeholder="Enter your content here..."
                  className="h-32"
                  required
                />
              </div>
              <div className="grid gap-2">
                <label htmlFor="message">Commit Message</label>
                <Input
                  id="message"
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  placeholder="Brief description of changes"
                  required
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsOpen(false)}>
                Cancel
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Create
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      <Dialog open={isTagDialogOpen} onOpenChange={setIsTagDialogOpen}>
        <DialogContent>
          <form onSubmit={handleCreateTag}>
            <DialogHeader>
              <DialogTitle>Add Tag</DialogTitle>
              <DialogDescription>
                Create a new tag for this version.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <label htmlFor="tagName">Tag Name</label>
                <Input
                  id="tagName"
                  value={newTagName}
                  onChange={(e) => setNewTagName(e.target.value)}
                  placeholder="Enter tag name"
                  required
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsTagDialogOpen(false)}>
                Cancel
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Create Tag
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>

      <Dialog open={isEditTagDialogOpen} onOpenChange={setIsEditTagDialogOpen}>
        <DialogContent>
          <form onSubmit={handleEditTag}>
            <DialogHeader>
              <DialogTitle>Edit Tag</DialogTitle>
              <DialogDescription>
                Update the tag name.
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <label htmlFor="editTagName">Tag Name</label>
                <Input
                  id="editTagName"
                  value={editingTag?.newName || ""}
                  onChange={(e) => setEditingTag(prev => 
                    prev ? { ...prev, newName: e.target.value } : null
                  )}
                  placeholder="Enter new tag name"
                  required
                />
              </div>
            </div>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsEditTagDialogOpen(false)}>
                Cancel
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                Update Tag
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}